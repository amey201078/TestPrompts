Functional Design Document Creation Prompt
----------------------------------------------------------------------------------------------------------------------------------------

Please reverse engineer the attached Functional Design Document (FDD) to generate a new, complete, and detailed FDD. Please follow these guidelines:

Deep Dive into Requirements:

Thoroughly analyze Section 1.1.2 (Scope) to enumerate all in-scope business processes, actors, and touchpoints.
Meticulously examine Section 1.1.4 (Description/Solution of Requirements) to extract every stated and implied requirement, including business rules, exceptions, integrations, and user interactions.
Ensure that no requirement or detail is missed—if in doubt, infer implied requirements based on context or best practices.
Expand and Structure the FDD:

For every requirement, describe the expected behavior, business context, and user experience in detail.
Structure the FDD into clear sections: Introduction, Scope, Actors/Roles, Functional Requirements, Non-Functional Requirements, User Stories, Integration Points, Reporting, Security, and any other relevant sections.
For each functional requirement, include:
Business rationale
Preconditions/triggers
Step-by-step user interactions
Expected system behavior
Edge cases and validation rules
Design Inventory Table:

Create a table with the following columns:
Feature
User Story
Components to be Generated or Extended
Type of Component (e.g., Entity, View, Workflow, Plugin, Integration, Dashboard)
Description
Each row should map a feature/user story to specific technical components required for implementation.
User Story Summary Table:

Create a summary table with columns:
User Story ID/Number
Summary/Title
Primary Actor
Goal
Acceptance Criteria
Ensure all critical user stories are included.
Comprehensive Coverage:

Review and incorporate relevant insights from other sections of the document (e.g., data model, integration, security, reporting, glossary).
For requirements or features not explicitly mentioned but implied or industry-standard, call them out as "Assumptions" or "Inferred Requirements".
Output Requirements:

The final FDD should be exhaustive, business-friendly, and ready for stakeholder review.
Use clear headings, bullet points, and tables for readability.
All requirements must be traceable to solution components.
Example Table: Design Inventory

Feature	User Story	Components to be Generated or Extended	Type of Component	Description
Customer Onboarding	As a user, I onboard a new customer...	Onboarding Entity, Main Form, Workflow	Entity, Form, Flow	Entity for onboarding, form for data entry, etc.
Example Table: User Story Summary

User Story ID	Summary	Primary Actor	Goal	Acceptance Criteria
US-01	Onboard new customer	Onboarding Agent	Capture and validate customer details	All required fields validated, KYC triggered
Instructions:

also perfom the below task as well

Task:
Analyze the attached requirement document for a Dynamics 365 CE project.

For each requirement, check if it is supported by Dynamics 365 CE Out-of-the-Box (OOB) features.
If not OOB, check if the requirement can be achieved through supported Customization (configuration, workflow, business rules, no-code/low-code customization).
If the requirement cannot be met OOB or via standard Customization, identify it as a gap or requiring custom development.
For each gap or ambiguity, raise clear, valid, and meaningful queries(should be multiple queries for ecah gap/ambiguity) for stakeholders to clarify or resolve.
Summarize the analysis in a table with the following columns:
Requirement ID/Reference
Requirement Description
OOB Supported (Yes/No)
Customization Possible (Yes/No)
Discrepancy/Gaps/Notes
Query for Stakeholders
Deliverable:
Provide the resulting table with all findings and queries for review.

Use the above structure and tables.
Ensure every requirement, even minor or implied, is described.
Reference and cover all relevant FDD sections.
Use business language where possible, but be specific and detailed.


FDD to TDD Prompt
-------------------------------------------------------------------------------------------------------------------------------------------------------

Based on the provided Functional Design Document (FDD) for a Dynamics 365 CE solution, create a detailed Technical Design Document (TDD) that addresses the following:

add the below information as the First page of the document :
Follow 
### **""Document Information""**  
- Create a table with the following columns:  
  - **Document Title**  
  - **File Name**  
  - **Date**  
---
### **Document Revision History**  
- Create a table with the following columns:  
  - **Version**  
  - **Date**  
  - **Modified By**  
  - **Changes**  
  - (one empty row is only needed. **No need to fill any values to it** eventhough the information is provided in FDD content)   

---

### **Document Review and Sign-off**  
- Create a table with the following columns:  
  - **Name**  
  - **Role**  
  - **Action**  
  - **Date Reviewed**  
  - (one empty row is only needed. **No need to fill any values to it** eventhough the information is provided in FDD content)  

add the below information :
add the disclaimer as text ** AI generated document may be incorrect ** with medium font size and i light red colour
Detailed description of the customization.
Configuration steps (if applicable).
use "nf" as publisher prefix for Custom entities
List out all entities and please consider the below points while creation
- Avoid entity creation and use Option Sets wherever applicable(this is not a thumb rule please decide according to the requirements)
- Use default name property wherever applicable insted of creating a seperate attribute
- call out Entity Ownership type by analyzing the entity details
- Please call out below CE Customizations for each entity in minute details for each item
	1) Forms(create table with colums Form Name,Form Fields)
	2) views(create table with colums View Name,View Type,View Filter)
	3) Business Rules(create table with colums Business Rule Name Pseudo Logic)
	4) Entity Relationships(Create Table with columns Source Entity,Target Entity,Relationship Type)
	
List out all attributes in seperate table categorized by entity

Security Role Matrix entitywise
Code snippets (if applicable, e.g., for calculated fields or custom logic) 
Integration Strategy: Identify all integration points mentioned in the FDD (or reasonably implied).  For each integration:

Specify the systems involved.
Outline the data flow (including data mapping).
Propose the integration method (e.g., API, webhooks, data export/import).
Provide considerations for security, error handling, and performance.
Data Migration: If the FDD indicates data migration, detail the following:

Source data systems.
Data cleansing and transformation rules.
Migration approach (e.g. custom scripts, data migration tools).
Data validation and reconciliation procedures.
PCF Component Evaluation: Evaluate the requirements outlined in the FDD and identify any potential use cases where Power Apps Component Framework (PCF) controls could enhance the user experience or provide required functionality.

Describe the component's purpose and functionality.
Outline the input and output parameters.
Provide links to relevant PCF component examples or documentation.
Plugin evaluation and PseudoCode: Where applicable (for example plugins, custom workflow activities, integrations, PCF components,javascript)  and Ensure the the pseudocode is in English, not any programming language and each code bloack should enclosed like below

For Example
7.1 KYC Completion Plugin
//{Component Type} Logic - Start
Insert a new blank line
{pseudocode}
Insert a new blank line
//{Component Type} Logic - End

Security Considerations: Describe the security measures that need to be in place for each of these areas: customizations, integrations and any PCF controls.

-Create the below two Checklists in seperate HTML files and Please ensure that the document should be well formatted and beautified and maintain proper paragraph spacing between the sections 
Please provide a comprehensive checklist for metadata generation in Dynamics 365 CE (Dataverse), focusing on entity and attribute creation. The checklist should cover:

Key steps to follow when creating or updating entities and attributes (including custom and OOB).
Important property settings for entities (such as display name, schema name, ownership type, primary attribute, notes/attachments, audit, duplicate detection, quick-create form, searchability, offline availability, etc.).
Important property settings for attributes (display name, schema name, data type, required level, searchable, audited, etc.).
Any recommended best practices for metadata management in Dynamics CE.
Present the checklist in a tabular format(with text top aligned) with columns:
Step Number
Checklist Item
Description
Configured (Yes/No/NA) - Default value as Blank
Repeat this for each entity identified above

Please provide a detailed checklist for registering a plugin in Dynamics 365 CE (Dataverse) using the Plugin Registration Tool. The checklist should include all essential steps, such as:

Plugin assembly registration
Adding step(s) with appropriate message, primary entity, and execution pipeline stage
Configuring filtering attributes (if needed)
Pre-/Post-Image registration (if needed)
Secure/Unsecure configuration (if applicable)
Enabling/disabling steps
Setting step order and execution mode (synchronous/asynchronous)
Assigning security roles (if needed)
Any best practices or recommendations for plugin registration
Please present the checklist in a tabular format(with text top aligned) with columns:

Step Number
Checklist Item
Description
Configured (Yes/No/NA) - Default value as Blank
Repeat this for each plugin identified above

Please ensure that complete HTML  code  with html and head and body tags with beautification using inline styling  for all elements and apply #FD5600 fill color and keep 1.5 lines spacing between each html table used 
	


Tech Design to Solution Creation Prompt(Plugins/JS) - Not working as on 25 May 2025 Due To powershell issues
--------------------------------------------------------------------------------------------------------------------------------------------------------

*"Create a robust PowerShell script to automate and orchestrate the Dynamics 365 CE solution setup process as follows:

1. Input and Parameterization

Accept as input parameters:
CompanyName
Dry-run flag (to simulate actions without making changes)
dont add TDD path as parameter rather retrieve the contents from TDD document attached

2. Document Parsing
download the attached doeument to current folder
Parse the provided TDD attached to identify and extract:
Project name or solution name (from the introduction, title, or a specific metadata section)

3. Solution and Project Structure Creation

Use VS CLI (devenv, dotnet new, or msbuild as appropriate) to:
Create a new blank .NET solution named based on the project or solution name found in the Technical Design Document
use standard using directives 
Add two class library projects:
'CompanyName.Plugins' (targeting .NET Framework 4.6.2)
'CompanyName.WebResources'

4.write a script that scans a given Visual Studio solution or project directory, locates all .csproj files, and automatically updates the language version to 8.0 or greater if the file contains the setting <Nullable>enable</Nullable> but is targeting a language version less than 8.0 (e.g., 7.3 or unspecified). The script should:
1.consider root directory as solution directory and should not use the parameter
2.Ignore .csproj files with project name contains "WebResources"
3.Check each .csproj for <Nullable>enable</Nullable>.
4.If found, set <LangVersion>10.0</LangVersion> (or higher) in the same <PropertyGroup>.

5. Write a script to locate sn.exe by searching under all "Program Files" and "Program Files (x86)" folders, and set full path with sn.exe to variable 
Sign the plugin project assembly with strong name and add related xml nodes in the first occourence of <PropertyGroup>

6. Delete Class1.cs from all the projects

7. Recursively scans a .sln file to identify all included C# projects (.csproj) and Modifies each project with name contains "WebResources" to set the <Build> property to false in all <ProjectConfiguration> sections

8.Build the Plugins project (optionally increment version)

Resolve nullable issue prompt
------------------------------------------------------------------------------------------------------------------------------------------------------------
can you suggest me the prompt to get a  powershell script to resolve Invalid 'nullable' value: 'Enable' for C# 7.3. Please use language version '10.0' or greater.


find sn.exe prompt
-------------------------------------------------------------------------------------------------------------------------------------------------------------
can you suggest me the prompt to get a  powershell script to find sn.exe file in local drives

TDD to Code Components Generation Prompt(Plugin/JS) - Assuming Solution Template is already available
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
1.Analyze the attached Technical Design Document and create and add the C# class file(one for each plugin code block which starts with "//Plugin Logic - Start" word till "//Plugin Logic - End" with plugin template with namespace( add comments to the function header) and convert the plugin pseudocde into C# plugin code and put it in the plugin template(inherting the IPlugin and implementation of the interface and make sure that dont use generic logic to merge plugin template and pseudocde) and every variable is initialzied and no compilation issues should occur) and check for first occurence of non blank line above plugin code block for Plugin Name(Exclude numbers and spaces and "." and omit the words like "Plugin","Javascript","Azure Function","Power Automate","Workflow") and apply proper C# syntax 
2. Analyze the attached Technical Design Document and create and add the javaScript file(one for each javaScript code block which starts with "//JavaScript Logic - Start" word till "//JavaScript Logic - End" with JavaScript template with namespace( add comments to the function header) and convert the JavaScript pseudocode into JavaScript code and put it in the JavaScript template(make sure that every variable is initialzied and make sure that dont use generic logic to merge JavaScript template and pseudocde) and check for first occurence of non blank line above JavaScript code block for JavaScript Name(Only allow alpha characters and omit the words like "Plugin","Javascript","Azure Function","Power Automate","Workflow") and apply proper JavaScript syntax 

TDD To CE Metadata Components Generation Prompt
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given the attached technical design document for a Dynamics 365 CE solution, please perform the following:

1. Analyze & Generate Dataverse Schema JSON
Analyze the document and extract all entities (both standard and custom) and their attributes that need to be created or updated in Microsoft Dynamics 365 CE Dataverse.
Generate a JSON file including:
For each entity(include entities which are target entities for lookup):
Entity name, logical/schema name (with publisher prefix for custom), type (Out Of Box/Custom)
List of attributes(exclude optionset), and for each attribute:
Attribute name, logical/schema name (with publisher prefix for custom), data type, description, target entity (for lookup)
2. Write Robust, Maintainable, OOP-Based C# Code
Write a single C# class file named DataverseGenerateMetadataHelper in the namespace DataverseGenerateMetadata with one facade public method Run.
The class should:
Accept the above JSON as a string parameter.
Use the Dynamics 365 CE Organization Service 
- Dynamically creates all entities in Microsoft Dataverse, ensuring:
    - Any entity that is the target of a lookup is created before any entity that references it via a lookup.
    - Entities are created in an order that satisfies all lookup dependencies (use topological sorting or dependency analysis to determine this order and ignore circular dependencies).

- For each entity:
	- Check the existance of the entity by checking "Could not find an entity" or "does not exist" string in exception message
    - Create the entity if it does not exist in Dataverse and set schema name to logical name.
    - Add all non-lookup attributes during entity creation(if attribute is already present then ignore).
    - After the referenced entity/entities exist, add lookup attributes referencing them(if attribute is already present then ignore).

The code must follow Microsoft best practices (naming conventions, synchronous processing, XML documentation, OOP, no console constructs).
Use appropriate and accurate Relationship request(based on analyzed document) to create lookup attributes. Do NOT use CreateAttributeRequest for lookups and use NoCascade option for cascaded configuration(for delete use RemoveLink) and set SchemaName of the relationship as <ReferencingEntity>_<ReferencedEntity>.
set ReferencedAttribute as primary key attribute of the target entity
Exception handling must be present for each method
show progress message on console after every step
The code should be easily extensible for more entities/attributes in the future.
Include a sample Run method demonstrating usage 
Output:

The JSON file as described above.
A single C# class file (DataverseGenerateMetadataHelper in DataverseGenerateMetadata namespace, with only one public facade method Run) that adheres to the above requirements.
Instructions for use:

Attach the technical design document as input.
Specify the publisher name to use for custom entities/attributes/solution.
Example usage:
"Given the attached TDD and the publisher name 'nf', please generate the required JSON schema and the C# class file as described above"

