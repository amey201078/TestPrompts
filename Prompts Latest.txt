Functional Design Document Creation Prompt
----------------------------------------------------------------------------------------------------------------------------------------

Please reverse engineer the attached Functional Design Document (FDD) to generate a new, complete, and detailed FDD. Please follow these guidelines:

Deep Dive into Requirements:

Thoroughly analyze Section 1.1.2 (Scope) to enumerate all in-scope business processes, actors, and touchpoints.
Meticulously examine Section 1.1.4 (Description/Solution of Requirements) to extract every stated and implied requirement, including business rules, exceptions, integrations, and user interactions.
Ensure that no requirement or detail is missedâ€”if in doubt, infer implied requirements based on context or best practices.
Expand and Structure the FDD:

For every requirement, describe the expected behavior, business context, and user experience in detail.
Structure the FDD into clear sections: Introduction, Scope, Actors/Roles, Functional Requirements, Non-Functional Requirements, User Stories, Integration Points, Reporting, Security, and any other relevant sections.
For each functional requirement, include:
Business rationale
Preconditions/triggers
Step-by-step user interactions
Expected system behavior
Edge cases and validation rules
Design Inventory Table:

Create a table with the following columns:
Feature
User Story
Components to be Generated or Extended
Type of Component (e.g., Entity, View, Workflow, Plugin, Integration, Dashboard)
Description
Each row should map a feature/user story to specific technical components required for implementation.
User Story Summary Table:

Create a summary table with columns:
User Story ID/Number
Summary/Title
Primary Actor
Goal
Acceptance Criteria
Ensure all critical user stories are included.
Comprehensive Coverage:

Review and incorporate relevant insights from other sections of the document (e.g., data model, integration, security, reporting, glossary).
For requirements or features not explicitly mentioned but implied or industry-standard, call them out as "Assumptions" or "Inferred Requirements".
Output Requirements:

The final FDD should be exhaustive, business-friendly, and ready for stakeholder review.
Use clear headings, bullet points, and tables for readability.
All requirements must be traceable to solution components.
Example Table: Design Inventory

Feature	User Story	Components to be Generated or Extended	Type of Component	Description
Customer Onboarding	As a user, I onboard a new customer...	Onboarding Entity, Main Form, Workflow	Entity, Form, Flow	Entity for onboarding, form for data entry, etc.
Example Table: User Story Summary

User Story ID	Summary	Primary Actor	Goal	Acceptance Criteria
US-01	Onboard new customer	Onboarding Agent	Capture and validate customer details	All required fields validated, KYC triggered
Instructions:

also perfom the below task as well

Task:
Analyze the attached requirement document for a Dynamics 365 CE project.

For each requirement, check if it is supported by Dynamics 365 CE Out-of-the-Box (OOB) features.
If not OOB, check if the requirement can be achieved through supported Customization (configuration, workflow, business rules, no-code/low-code customization).
If the requirement cannot be met OOB or via standard Customization, identify it as a gap or requiring custom development.
For each gap or ambiguity, raise clear, valid, and meaningful queries(should be multiple queries for ecah gap/ambiguity) for stakeholders to clarify or resolve.
Summarize the analysis in a table with the following columns:
Requirement ID/Reference
Requirement Description
OOB Supported (Yes/No)
Customization Possible (Yes/No)
Discrepancy/Gaps/Notes
Query for Stakeholders
Deliverable:
Provide the resulting table with all findings and queries for review.

Use the above structure and tables.
Ensure every requirement, even minor or implied, is described.
Reference and cover all relevant FDD sections.
Use business language where possible, but be specific and detailed.


FDD to TDD Prompt
-------------------------------------------------------------------------------------------------------------------------------------------------------

Based on the provided Functional Design Document (FDD) for a Dynamics 365 CE solution, create a detailed Technical Design Document (TDD) that addresses the following:

Comprehensive Coverage of FDD:  Thoroughly translate all requirements and specifications from the FDD into technical specifications.  Ensure all functional aspects are addressed with specific technical solutions and add visual interpretation wherever needed.Use Tabluar format for all the interpretations if needed

Customization Analysis:  Analyze the FDD for any areas requiring customizations within Dynamics 365 CE (custom entities, fields, business rules, workflows, business process flows and javascript). For each customization, provide:

Detailed description of the customization.
Configuration steps (if applicable).
Add Role and Privileges matrix in case of security roles
List out all entities
List out all attributes in seperate table categorized by entity
Code snippets (if applicable, e.g., for calculated fields or custom logic) 
Integration Strategy: Identify all integration points mentioned in the FDD (or reasonably implied).  For each integration:

Specify the systems involved.
Outline the data flow (including data mapping).
Propose the integration method (e.g., API, webhooks, data export/import).
Provide considerations for security, error handling, and performance.
Data Migration: If the FDD indicates data migration, detail the following:

Source data systems.
Data cleansing and transformation rules.
Migration approach (e.g., custom scripts, data migration tools).
Data validation and reconciliation procedures.
PCF Component Evaluation: Evaluate the requirements outlined in the FDD and identify any potential use cases where Power Apps Component Framework (PCF) controls could enhance the user experience or provide required functionality.

Describe the component's purpose and functionality.
Outline the input and output parameters.
Provide links to relevant PCF component examples or documentation.
PseudoCode: Where applicable (for example plugins, custom workflow activities, integrations, PCF components,javascript)  and Ensure the the pseudocode is in English, not any programming language and each code bloack should enclosed like below
{Plugin Header}
//{Component} Logic - Start
{pseudocode}
//{Component} Logic - End

For Example
7.1 KYC Completion Plugin
//{Plugin} Logic - Start
{pseudocode}
//{Plugin} Logic - End


Security Considerations: Describe the security measures that need to be in place for each of these areas: customizations, integrations, data migrations, and any PCF controls.
Please ensure that the document should be well formatted and beautified and maintain proper paragraph spacing between the sections and it should be in HTML format
	


Tech Design to Solution Creation Prompt(Plugins/JS) - Not working as on 25 May 2025 Due To powershell issues
--------------------------------------------------------------------------------------------------------------------------------------------------------

*"Create a robust PowerShell script to automate and orchestrate the Dynamics 365 CE solution setup process as follows:

1. Input and Parameterization

Accept as input parameters:
CompanyName
Dry-run flag (to simulate actions without making changes)
dont add TDD path as parameter rather retrieve the contents from TDD document attached

2. Document Parsing
download the attached doeument to current folder
Parse the provided TDD attached to identify and extract:
Project name or solution name (from the introduction, title, or a specific metadata section)

3. Solution and Project Structure Creation

Use VS CLI (devenv, dotnet new, or msbuild as appropriate) to:
Create a new blank .NET solution named based on the project or solution name found in the Technical Design Document
use standard using directives 
Add two class library projects:
'CompanyName.Plugins' (targeting .NET Framework 4.6.2)
'CompanyName.WebResources'

4.write a script that scans a given Visual Studio solution or project directory, locates all .csproj files, and automatically updates the language version to 8.0 or greater if the file contains the setting <Nullable>enable</Nullable> but is targeting a language version less than 8.0 (e.g., 7.3 or unspecified). The script should:
1.consider root directory as solution directory and should not use the parameter
2.Ignore .csproj files with project name contains "WebResources"
3.Check each .csproj for <Nullable>enable</Nullable>.
4.If found, set <LangVersion>10.0</LangVersion> (or higher) in the same <PropertyGroup>.

5. Write a script to locate sn.exe by searching under all "Program Files" and "Program Files (x86)" folders, and set full path with sn.exe to variable 
Sign the plugin project assembly with strong name and add related xml nodes in the first occourence of <PropertyGroup>

6. Delete Class1.cs from all the projects

7. Recursively scans a .sln file to identify all included C# projects (.csproj) and Modifies each project with name contains "WebResources" to set the <Build> property to false in all <ProjectConfiguration> sections

8.Build the Plugins project (optionally increment version)

Resolve nullable issue prompt
------------------------------------------------------------------------------------------------------------------------------------------------------------
can you suggest me the prompt to get a  powershell script to resolve Invalid 'nullable' value: 'Enable' for C# 7.3. Please use language version '10.0' or greater.


find sn.exe prompt
-------------------------------------------------------------------------------------------------------------------------------------------------------------
can you suggest me the prompt to get a  powershell script to find sn.exe file in local drives

TDD to Code Components Generation Prompt(Plugin/JS) - Assuing Solution Template is already available
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
1.Analyze the attached Technical Design Document and create a powershell script to add the class file(one for each plugin code block which starts with "//Plugin Logic - Start" word till "//Plugin Logic - End" with plugin template with namespace( add comments to the function header) and convert the plugin pseudo into C# plugin code and put it in the plugin template(inherting the IPlugin and implementation of the interface and make sure that every variable is initialzied and no compilation issues should occur) and consider line above plugin code block for Plugin Name(Exclude numbers and spaces and "." and omit the words like "Plugin","Javascript","Azure Function","Power Automate","Workflow") and apply proper C# syntax 
2. Copy the c# file to plugins folder of the root solution folder(As input parameter)
3. Analyze the attached Technical Design Document and create a powershell script to add the javaScript file(one for each javaScript code block which starts with "//JavaScript Logic - Start" word till "//JavaScript Logic - End" with JavaScript template with namespace( add comments to the function header) and convert the JavaScript pseudo into JavaScript code and put it in the JavaScript template(make sure that every variable is initialzied and no compilation issues should occur) and consider line above JavaScript code block for JavaScript Name(Only allow alpha characters and omit the words like "Plugin","Javascript","Azure Function","Power Automate","Workflow") and apply proper JavaScript syntax 
4. Copy the Javascript to Webresources folder of the root solution folder(As input parameter)
5. Add the two solution root parameter for both plugins and javascript and use them in the script generated above

TDD To CE Metadata Components Generation Prompt
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1.Analyze the attached technical design document and generate a JSON file that lists all entities (both standard and custom) and their attributes which need to be created or updated in Microsoft Dynamics 365 CE Dataverse. The JSON should include for 
1. New Solution Creation with Solution name suffixed by current DateTime
2. Creation of global option sets
3. for each entity:
Entity name
Entity type (Out Of Box/Custom)
4.List of attributes, and for each attribute:
Attribute name
Data type
Description
Target entity(in case of lookup)
Set Requirred as Optional for all new attributes
5. add attributes and entities in the solution mentioned in step 1

2.Write robust, maintainable, OOP-based C# code that reads the above JSON(as a string parameter) and, using the Dynamics 365 CE Organization Service (with connection string configurable), creates or updates the described entities and attributes in Dataverse.
Just check for attributes existance in CE and if present then please update its properties that are changed
The entire implementation must be a single C# class file (no extra files).
Follow Microsoft best practices for C# (naming conventions, exception handling, async/await where appropriate, XML documentation, etc.).
Use appropriate abstraction and modular code within the class.
Demonstrate how to load the connection string and JSON file.
3.The code should be easily extensible for more entities/attributes in the future.
Include a sample Main method demonstrating usage.
Output:
The JSON file as described above.
A single C# class file with namespace containing all code, including entity/attribute parsing, Dataverse connection, and entity/attribute creation/update logic and it should be able to get called from any .Net Application(dont use console contruct anywhere)

